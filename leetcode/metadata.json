{
  "problems": [
    {
      "id": "merge-intervals",
      "title": "Merge Intervals",
      "level": "Medium",
      "tags": ["array", "sorting"],
      "problem": "Given an array $A$ where $A_i$ is $(l_i, r_i)$ representing an interval, compute an array such that all overlapping intervals in $A$ are merged into one. For example, if given $(l_i, r_i)$ and $(l_j, r_j)$ where $l_j\lt r_i$, then these two intervals should be merged into $(l_i, r_j)$.",
      "solution": [
        {
          "algorithm": "Sort $A$ such that the left bound is sorted. Iterate through the sorted intervals while maintaining a current interval ($c$). If $l_{A_i}$ is greater than $r_{c}$ then $c$ is added to the result and $c$ is updated to $A_i$. Otherwise, $r_{c}$ becomes $r_{A_i}$.",
          "implementations": [
            {
              "filename": "a.cpp",
              "language": "c++17"
            }
          ]
        }
      ]
    }
  ]
}
